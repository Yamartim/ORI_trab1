#include <fstream>
#include <iostream>
#include "Registro.h"
#include "Arquivo.h"

using std::cout;
using std::endl;
void write_txt_value(int v)
{
  std::ofstream txt_out("txt.out");
  txt_out << v;
}

int read_txt_value()
{
  std::ifstream txt_in("txt.out");
  int value;
  txt_in >> value;
  return value;
}

void write_bin_value(int v)
{
  ArquivoFIX arquivoFix("arquivo.dat", "indices.bin", 't');
  std::fstream arq;//arquivo para leitura e escrita
  char c; //variavel para receber os caracteres 1 a 1 do arquivo
    //convertendo de string para char*
    std::string aux = arquivoFix.getPath();
    int tam = aux.length();
    char* path = new char[tam + 1];
    strcpy(path, aux.c_str());
    
   // arquivoFix.ajustaCampo(reg);

    //criando arquivo caso ele nao exista
    arq.open(path,std::ios_base::out | std::ios_base::binary);
    arq.close();

    //std::fstream arq(path, std::ios_base::binary|std::ios_base::out|std::ios_base::in);
    arq.open(path, std::ios_base::in | std::ios_base::out | std::ios_base::binary);

    //caso falhe em abrir o arquivo
    if(!arq.is_open()){
        cout << "Erro: Nao foi possivel abrir o arquivo" << endl;
        return;
    }

    //garantindo que os ponteiros de leitura e escrita começam no começo do arquivo
    arq.seekg(0, std::ios::beg);
    arq.seekp(0, std::ios::beg);

    arq.get(c);

    //verificando por remoçoes logicas
    while(c != '*' && !arq.eof()){
        //arq.seekg(getOffsetReg() , std::ios::cur);
        //arq.seekp(getOffsetReg() , std::ios::cur);
        arq.get(c);
        arq.clear();
    }

    arq.clear();
    arq.write((char*)&v, sizeof(int));

    arq.close();

}

int read_bin_value()
{
  std::fstream bin_in("bin.out",std::ios_base::binary|std::ios_base::in);
  int value;
  bin_in.read((char*)&value,sizeof(int));
  return value;
}

int main()
{
  int value = -12345;
  write_txt_value(value);
  write_bin_value(value);
  std::cout << "Reading txt file value as integer: " << read_txt_value() << std::endl;
  std::cout << "Reading binary file value as integer: " << read_bin_value() << std::endl;
  return 0;
}